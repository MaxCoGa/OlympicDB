/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat (TomEE)/8.5.6 (7.0.2)
 * Generated at: 2019-04-04 20:14:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import connection.LoginValidate;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("connection.LoginValidate");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n");
      out.write("<title>Please Login....</title>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("    function validate_required(field, alerttxt) {\n");
      out.write("        with (field) {\n");
      out.write("            if (value == null || value == \"\") {\n");
      out.write("                alert(alerttxt);\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("            else {\n");
      out.write("                return true;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function validate_Loginform(thisform) {\n");
      out.write("        with (thisform) {\n");
      out.write("            if (validate_required(username, \"Please enter the username\") == false)\n");
      out.write("            {\n");
      out.write("                username.focus();\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (validate_required(password, \"Please enter the password\") == false)\n");
      out.write("            {\n");
      out.write("                password.focus();\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("            return true;\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("\n");

 String msg = "";
 String id=request.getParameter("id");  
 String password = request.getParameter("psw");
 if(id != null && password != null && id.length() > 0 && password.length() > 0){
  LoginValidate obj = new LoginValidate();
  boolean flag = obj.validateUserLogin(Integer.parseInt(id), password);
  if(flag){
   request.getRequestDispatcher("index.jsp").forward(request, response);
  }else{
   msg = "Invalid username or password";
  }
 }

      out.write("\n");
      out.write("\n");
      out.write(" <form action=\"login.jsp\" method=\"post\" onsubmit=\"return validate_Loginform(this)\">\n");
      out.write("  <table width=\"40%\" border=\"1\" align=\"center\">\n");
      out.write("   <tr>\n");
      out.write("    <th colspan=\"2\" align=\"center\" valign=\"top\">Please enter login details</th>\n");
      out.write("   </tr>\n");
      out.write("   <tr height=\"50\">\n");
      out.write("    <td valign=\"middle\" align=\"right\">Employee id</td>\n");
      out.write("    <td align=\"left\"><input name=\"id\" size=\"20\" value=\"\"  type=\"text\">\n");
      out.write("    </td>\n");
      out.write("   </tr>\n");
      out.write("   <tr>\n");
      out.write("    <td valign=\"middle\" align=\"right\">Password</td>\n");
      out.write("    <td align=\"left\"><input name=\"psw\" size=\"20\" value=\"\"  type=\"password\">\n");
      out.write("    </td>\n");
      out.write("   </tr>\n");
      out.write("   <tr height=\"40\">\n");
      out.write("    <td colspan=\"2\" align=\"center\"><input value=\"Login\" name=\"B1\" type=\"submit\"></td>\n");
      out.write("   </tr>\n");
      out.write("  </table>\n");
      out.write("  \n");
      out.write("  <br>\n");
      out.write("  <br>\n");
      out.write("  <br>\n");
      out.write("  <br>\n");
      out.write("  \n");
      out.write("  <p align=\"center\"> <b><font color=\"darkred\">");
      out.print(msg );
      out.write("</font></b></p>\n");
      out.write("\n");
      out.write(" </form>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
